======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\components\admin-user-create\admin-user-create.component.html ========
<div class="p-4">
  <h2>Criar novo usuÃ¡rio</h2>

  <form [formGroup]="createUserForm" (ngSubmit)="onSubmit()">
    <input formControlName="fullName" placeholder="Nome completo" />
    <input formControlName="userName" placeholder="Nome de usuÃ¡rio" />
    <input formControlName="email" placeholder="Email" />
    <textarea formControlName="bio" placeholder="Bio"></textarea>
    <input formControlName="password" type="password" placeholder="Senha" />
    <select formControlName="role" class="w-full p-2 border rounded">
      <option value="Writer">Writer</option>
      <option value="User">User</option>
    </select>
    
    

    <button type="submit">Criar usuÃ¡rio</button>

    <div *ngIf="successMessage" class="text-success mt-2">{{ successMessage }}</div>
    <div *ngIf="errorMessage" class="text-error mt-2">{{ errorMessage }}</div>
  </form>
</div>

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\components\admin-user-create\admin-user-create.component.spec.ts ========
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AdminUserCreateComponent } from './admin-user-create.component';

describe('AdminUserCreateComponent', () => {
  let component: AdminUserCreateComponent;
  let fixture: ComponentFixture<AdminUserCreateComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [AdminUserCreateComponent]
    });
    fixture = TestBed.createComponent(AdminUserCreateComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\components\admin-user-create\admin-user-create.component.ts ========
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

import Swal from 'sweetalert2';
import { CreateUserRequest } from '../../models/create-user.model';
import { AdminUserService } from '../../services/admin-user.service';
@Component({
  selector: 'app-admin-user-create',
  templateUrl: './admin-user-create.component.html',
  styleUrls: ['./admin-user-create.component.css']
})
export class AdminUserCreateComponent {
  createUserForm: FormGroup;
  successMessage = '';
  errorMessage = '';

  constructor(private fb: FormBuilder, private adminUserService: AdminUserService) {
    this.createUserForm = this.fb.group({
      fullName: ['', Validators.required],
      userName: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      bio: [''],
      password: ['', Validators.required],
      role: ['User', Validators.required], // valor padrÃ£o atualizado para 'User'
    });
    
  }

  onSubmit() {
    if (this.createUserForm.invalid) return;
  
    const formValue = this.createUserForm.value;
  
    console.log('ðŸ›« Payload enviado:', formValue);
  
    const userPayload: CreateUserRequest = { ...formValue };
  
    this.adminUserService.createUser(userPayload).subscribe({
      next: () => {
        Swal.fire('Sucesso', 'UsuÃ¡rio criado com sucesso!', 'success');
        this.createUserForm.reset({ role: 'User' });
      },
      error: (err) => {
        Swal.fire('Erro', err.error || 'Erro ao criar usuÃ¡rio.', 'error');
      },
    });
  }
  

}

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\components\admin-user-list\admin-user-list.component.html ========
<div class="container-fluid p-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="h3 mb-0">UsuÃ¡rios</h2>
    <div class="d-flex gap-2">
      <input type="text" 
             [(ngModel)]="searchTerm" 
             (keyup)="filterUsers()"
             placeholder="Buscar usuÃ¡rios..." 
             class="form-control search-input">
    </div>
  </div>

  <div *ngIf="users.length === 0" class="text-center py-4">
    <p class="text-muted fs-5">Nenhum usuÃ¡rio encontrado.</p>
  </div>

  <div class="user-grid">
    <div *ngFor="let user of filteredUsers" 
         class="user-card card mb-3 animate__animated animate__fadeIn">
      <div class="card-body">
        <div class="d-flex justify-content-between align-items-start">
          <div class="d-flex gap-3">
            <div class="user-avatar">
              <span>{{user.fullName.charAt(0)}}</span>
            </div>
            <div>
              <h3 class="h5 mb-1">{{user.fullName}}</h3>
              <p class="text-muted mb-1">{{'@' + user.userName}}</p>
              <p class="text-muted small">{{user.email}}</p>
            </div>
          </div>
          
          <div class="d-flex gap-2">
            <button (click)="viewProfile(user.userName)"
                    class="btn btn-primary btn-sm d-flex align-items-center">
              <i class="fas fa-eye me-2"></i>
              Ver Perfil
            </button>
            <button (click)="deleteUser(user.id)"
                    class="btn btn-danger btn-sm d-flex align-items-center">
              <i class="fas fa-trash-alt me-2"></i>
              Excluir
            </button>
          </div>
        </div>
        
        <div *ngIf="user.bio" class="mt-3">
          <p class="user-bio mb-0">
            {{user.bio}}
          </p>
        </div>
      </div>
    </div>
  </div>
</div>
======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\components\admin-user-list\admin-user-list.component.spec.ts ========
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AdminUserListComponent } from './admin-user-list.component';

describe('AdminUserListComponent', () => {
  let component: AdminUserListComponent;
  let fixture: ComponentFixture<AdminUserListComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [AdminUserListComponent]
    });
    fixture = TestBed.createComponent(AdminUserListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\components\admin-user-list\admin-user-list.component.ts ========
import { Component, OnInit } from '@angular/core';
import { UserProfile } from 'src/app/profile/user-profile/shared/models/user-profile.model';

import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { AdminUserService } from '../../services/admin-user.service';

@Component({
  selector: 'app-admin-user-list',
  templateUrl: './admin-user-list.component.html',
  styleUrls: ['./admin-user-list.component.css']
})
export class AdminUserListComponent implements OnInit {
  users: UserProfile[] = [];
  filteredUsers: UserProfile[] = [];
  searchTerm: string = '';

  constructor(
    private adminUserService: AdminUserService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.loadUsers();
  }

  loadUsers(): void {
    this.adminUserService.getAllUsers().subscribe({
      next: (response) => {
        this.users = response;
        this.filteredUsers = [...response]; // inicializa lista filtrada
      },
      error: (err) => {
        console.error('Erro ao buscar usuÃ¡rios:', err);
      }
    });
  }

  filterUsers(): void {
    const term = this.searchTerm.toLowerCase();
    this.filteredUsers = this.users.filter(user =>
      user.fullName.toLowerCase().includes(term) ||
      user.userName.toLowerCase().includes(term) ||
      user.email.toLowerCase().includes(term)
    );
  }

  viewProfile(userName: string): void {
    this.router.navigate(['/profile', userName]);
  }

  deleteUser(userId: string): void {
    Swal.fire({
      title: 'Tem certeza?',
      text: 'Essa aÃ§Ã£o nÃ£o pode ser desfeita!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Sim, excluir!',
      cancelButtonText: 'Cancelar'
    }).then((result) => {
      if (result.isConfirmed) {
        this.adminUserService.deleteUser(userId).subscribe({
          next: () => {
            this.users = this.users.filter(user => user.id !== userId);
            this.filterUsers(); // atualiza filtrados tambÃ©m
            Swal.fire('ExcluÃ­do!', 'UsuÃ¡rio removido com sucesso.', 'success');
          },
          error: () => {
            Swal.fire('Erro', 'Erro ao excluir o usuÃ¡rio.', 'error');
          }
        });
      }
    });
  }
}

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\components\admin-user-dashboard.component.html ========
<div class="dashboard-container">
  
    <!-- Perfil Ã  esquerda -->
    <div class="profile-card">
      <div class="profile-image position-relative">
        <img [src]="displayImageUrl || 'assets/default-avatar.png'" alt="Foto de Perfil" />
        <button type="button" class="edit-photo-btn" (click)="photoInput.click()" title="Editar Foto">
          <i class="bi bi-camera-fill"></i>
        </button>
        <input #photoInput type="file" (change)="onFileSelected($event)" accept="image/*" style="display: none;" />
      </div>
      <div class="profile-info">
        <h2>{{ profile?.fullName }}</h2>
        <p class="username">{{ '@' + profile?.userName }}</p>
        <p class="email">{{ profile?.email }}</p>
  
        <div class="bio" *ngIf="profile?.bio">
          <label>Bio</label>
          <p>{{ profile?.bio }}</p>
        </div>
        <div class="bio" *ngIf="profile?.interests">
          <label>Interests</label>
          <p>{{ profile?.interests }}</p>
        </div>
  
        <!-- Sidebar embutida -->
        <div class="sidebar-buttons">
          <button class="btn btn-outline-primary w-100 mb-2" (click)="onSectionChange('posts')">Dashboard</button>
          <button class="btn btn-outline-primary w-100 mb-2" (click)="onSectionChange('posts-list')">todos os posts</button>
          <button class="btn btn-outline-primary w-100 mb-2" (click)="onSectionChange('profile')">Perfil</button>
          <button class="btn btn-outline-danger w-100 mb-2" (click)="onSectionChange('manage-users')">Gerenciar UsuÃ¡rios</button>
          <button class="btn btn-success w-100 mb-2" (click)="onSectionChange('create-user')"> Criar novo usuÃ¡rio</button>
  
        </div>
      </div>
    </div>
  
    <!-- Ãrea dinÃ¢mica Ã  direita -->
    <div class="post-list">
      <ng-container [ngSwitch]="selectedSection">
  
        <!-- Lista de Posts -->
        <app-writer-posts-list 
          *ngSwitchCase="'posts-list'" 
          [posts]="blogPosts">
        </app-writer-posts-list>
  
        <!-- Dashboard de Posts -->
        <app-writer-posts 
          *ngSwitchCase="'posts'" 
          [posts]="blogPosts"
          (viewAllPosts)="onSectionChange('posts-list')">
        </app-writer-posts>
  
        <!-- Perfil -->
        <app-writer-profile *ngSwitchCase="'profile'"></app-writer-profile>
  
        <!-- Lista de UsuÃ¡rios -->
        <app-admin-user-list *ngSwitchCase="'manage-users'"></app-admin-user-list>
        <app-admin-user-create *ngSwitchCase="'create-user'"></app-admin-user-create>

  
        <!-- Default -->
        <app-writer-posts 
          *ngSwitchDefault 
          [posts]="blogPosts" 
          (viewAllPosts)="onSectionChange('posts-list')">
        </app-writer-posts>
  
      </ng-container>
    </div>
  </div>
  
======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\components\admin-user-dashboard.component.spec.ts ========
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AdminUserDashboardComponent } from './admin-user-dashboard.component';

describe('AdminUserDashboardComponent', () => {
  let component: AdminUserDashboardComponent;
  let fixture: ComponentFixture<AdminUserDashboardComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [AdminUserDashboardComponent]
    });
    fixture = TestBed.createComponent(AdminUserDashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\components\admin-user-dashboard.component.ts ========
import { Component } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { UserProfile } from 'src/app/profile/user-profile/shared/models/user-profile.model';
import { UserProfileService } from 'src/app/profile/user-profile.service';
import { BlogPost } from '../../../blog-post/models/blog-post.model';
import { BlogPostService } from '../../../blog-post/services/blog-post.service';
import { AdminUserService } from '../services/admin-user.service';

@Component({
  selector: 'app-admin-user-dashboard',
  templateUrl: './admin-user-dashboard.component.html',
  styleUrls: ['./admin-user-dashboard.component.css']
})
export class AdminUserDashboardComponent {
  profile?: UserProfile;
  blogPosts: BlogPost[] = [];
  loading = true;
  displayImageUrl: string = '';
  selectedSection: string = 'posts';
  authors: UserProfile[] = []; 
  selectedImageFile: File | null = null;


  constructor(
    private userProfileService: UserProfileService,
    private blogPostService: BlogPostService,
    private adminUserService: AdminUserService,
    private toastr: ToastrService
  ) {}

  ngOnInit(): void {
    this.loadProfileAndPosts();
  }

  private loadProfileAndPosts(): void {
    this.userProfileService.GetMyProfile().subscribe({
      next: (profile) => {
        this.profile = profile;
        this.displayImageUrl = this.userProfileService.getFullImageUrl(profile.imageUrl);

        this.blogPostService.getMyPosts().subscribe({
          next: (posts) => {
            this.blogPosts = posts;
            this.loading = false;
          },
          error: () => {
            this.toastr.error('Erro ao carregar posts');
            this.loading = false;
          }
        });
      },
      error: () => {
        this.toastr.error('Erro ao carregar perfil');
        this.loading = false;
      }
    });

    // Usando o AdminUserService em vez do UserProfileService
    this.adminUserService.getAllUsers().subscribe({
      next: (data) => {
        // opcional: filtra o admin fora da lista
        this.authors = data.filter(author => author.userName.toLowerCase() !== 'admin');
      },
      error: (error) => {
        console.error('Erro ao carregar autores:', error);
        this.toastr.error('Erro ao carregar autores');
      }
    });
  }

  onSectionChange(section: string) {
    this.selectedSection = section;
  }


  onFileSelected(event: any): void {
    const file = event.target.files[0];
  
    if (!file || !file.type.startsWith('image/')) {
      this.toastr.error('Por favor, selecione uma imagem vÃ¡lida.');
      return;
    }
  
    if (file.size > 5 * 1024 * 1024) {
      this.toastr.error('A imagem deve ter no mÃ¡ximo 5MB.');
      return;
    }
  
    this.selectedImageFile = file;
    this.uploadAdminProfileImage();
  }
  

  uploadAdminProfileImage(): void {
    if (!this.selectedImageFile) return;
  
    const formData = new FormData();
    formData.append('imageFile', this.selectedImageFile);
  
    this.userProfileService.UpdateMyProfile(formData).subscribe({
      next: (updatedProfile) => {
        this.toastr.success('Imagem de perfil atualizada com sucesso!');
        this.profile = updatedProfile;
        this.displayImageUrl = this.userProfileService.getFullImageUrl(updatedProfile.imageUrl);
        this.selectedImageFile = null;
      },
      error: () => {
        this.toastr.error('Erro ao atualizar imagem de perfil.');
      }
    });
  }
}
======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\models\create-user.model.ts ========
export interface CreateUserRequest {
  fullName: string;
  userName: string;
  email: string;
  bio?: string;
  password: string;
  role: 'Writer' | 'User'; // aceita apenas Writer ou User
}

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\services\admin-user.service.ts ========
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { UserProfile } from 'src/app/profile/user-profile/shared/models/user-profile.model';
import { environment } from 'src/environments/environment';
import { CreateUserRequest } from '../models/create-user.model';


@Injectable({
  providedIn: 'root',
})
export class AdminUserService {
  constructor(private http: HttpClient) {}

  getAllUsers(): Observable<UserProfile[]> {
    return this.http.get<UserProfile[]>(`${environment.apiBaseUrl}/api/UserManagement/users`);
  }
  

  getWriterById(id: string): Observable<UserProfile> {
    return this.http.get<UserProfile>(`${environment.apiBaseUrl}/api/UserManagement/writers/${id}`);
  }

 

createWriter(user: CreateUserRequest): Observable<UserProfile> {
  return this.http.post<UserProfile>(
    `${environment.apiBaseUrl}/api/UserManagement/users`,
    user
  );
}

createUser(user: CreateUserRequest): Observable<UserProfile> {
  // a conversÃ£o de 'Reader' para 'User' serÃ¡ feita no componente
  return this.http.post<UserProfile>(
    `${environment.apiBaseUrl}/api/UserManagement/users`,
    user
  );
}

  updateUserRole(userId: string, newRole: string): Observable<UserProfile> {
    return this.http.put<UserProfile>(
      `${environment.apiBaseUrl}/api/UserManagement/writers/${userId}/role`,
      { newRole }
    );
  }
  deleteUser(userId: string): Observable<UserProfile> {
    return this.http.delete<UserProfile>(`${environment.apiBaseUrl}/api/UserManagement/users/${userId}`);
  }
  

  deleteWriter(userId: string): Observable<UserProfile> {
    return this.http.delete<UserProfile>(`${environment.apiBaseUrl}/api/UserManagement/writers/${userId}`);
  }
}
======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\admin-routing.module.ts ========
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { adminGuard } from '../../auth/guards/admin.guard';
import { AdminUserCreateComponent } from './components/admin-user-create/admin-user-create.component';
import { AdminUserDashboardComponent } from './components/admin-user-dashboard.component';
import { AdminUserListComponent } from './components/admin-user-list/admin-user-list.component';


const routes: Routes = [
  {
    path: 'admin',
    children: [
      { path: 'dashboard', component: AdminUserDashboardComponent },
      { path: 'users', component: AdminUserListComponent },
      { path: 'users/create', component: AdminUserCreateComponent }
    ],
    canActivate: [adminGuard]
  }
];
@NgModule({
 
  imports: [
    RouterModule.forChild(routes)
  ],
  exports:[RouterModule]
})
export class AdminRoutingModule { }

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\admin-user.service.spec.ts ========
import { TestBed } from '@angular/core/testing';

import { AdminUserService } from './admin-user.service';

describe('AdminUserService', () => {
  let service: AdminUserService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AdminUserService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\admin\admin.module.ts ========
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AdminUserDashboardComponent } from './components/admin-user-dashboard.component';
import { AdminUserListComponent } from './components/admin-user-list/admin-user-list.component';
import { AdminUserCreateComponent } from './components/admin-user-create/admin-user-create.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AdminRoutingModule } from './admin-routing.module';
import { SharedModule } from '../shared/shared.module';



@NgModule({
  declarations: [
    AdminUserDashboardComponent,
    AdminUserListComponent,
    AdminUserCreateComponent
  ],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    AdminRoutingModule,
    SharedModule
  ],
  exports: [    
    AdminUserDashboardComponent,
    AdminUserListComponent
  ]
})
export class AdminModule { }

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\shared\components\user-profile-card\user-profile-card.component.html ========
<p>user-profile-card works!</p>

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\shared\components\user-profile-card\user-profile-card.component.spec.ts ========
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserProfileCardComponent } from './user-profile-card.component';

describe('UserProfileCardComponent', () => {
  let component: UserProfileCardComponent;
  let fixture: ComponentFixture<UserProfileCardComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [UserProfileCardComponent]
    });
    fixture = TestBed.createComponent(UserProfileCardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\shared\components\user-profile-card\user-profile-card.component.ts ========
import { Component } from '@angular/core';

@Component({
  selector: 'app-user-profile-card',
  templateUrl: './user-profile-card.component.html',
  styleUrls: ['./user-profile-card.component.css']
})
export class UserProfileCardComponent {

}

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\shared\components\user-profile-list\user-profile-list.component.html ========
<p>user-profile-list works!</p>

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\shared\components\user-profile-list\user-profile-list.component.spec.ts ========
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserProfileListComponent } from './user-profile-list.component';

describe('UserProfileListComponent', () => {
  let component: UserProfileListComponent;
  let fixture: ComponentFixture<UserProfileListComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [UserProfileListComponent]
    });
    fixture = TestBed.createComponent(UserProfileListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\shared\components\user-profile-list\user-profile-list.component.ts ========
import { Component } from '@angular/core';

@Component({
  selector: 'app-user-profile-list',
  templateUrl: './user-profile-list.component.html',
  styleUrls: ['./user-profile-list.component.css']
})
export class UserProfileListComponent {

}

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\shared\shared.module.ts ========
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { UserProfileCardComponent } from './components/user-profile-card/user-profile-card.component';
import { UserProfileListComponent } from './components/user-profile-list/user-profile-list.component';
import { RouterModule } from '@angular/router';



@NgModule({
  declarations: [
    UserProfileCardComponent,
    UserProfileListComponent
  ],
  imports: [
    CommonModule,
    RouterModule
  ],
  exports:[
    UserProfileCardComponent,
    UserProfileListComponent
  ]
})
export class SharedModule { }

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-posts\writer-posts.component.html ========
<div class="container-fluid">

  <!-- BotÃ£o de adicionar post -->
  <div class="d-flex justify-content-end mb-3">
    <button class="btn btn-success" (click)="addPost()">
      âž• Adicionar Postagem
    </button>
  </div>

  <!-- Linha dos cards -->
  <div class="row g-4">
    
    <!-- Card: Total de Postagens -->
    <div class="col-md-3">
      <div class="card text-white bg-primary h-100 card-total-posts-clickable"
      
      (click)="viewAllPosts.emit()">
        <div class="card-body d-flex flex-column justify-content-center text-center">
          <h5 class="card-title">Total de Postagens</h5>
          <p class="display-6 m-0">{{ totalPosts }}</p>
        </div>
      </div>
    </div>
    

    <!-- Card: Ãšltimos Posts -->
    <div class="col-md-9">
      <div class="card h-100">
        <div class="card-body">
          <h5 class="card-title">Ãšltimos Posts</h5>
          <ul class="list-group list-group-flush">
            <li 
              *ngFor="let post of latestPosts" 
              class="list-group-item d-flex justify-content-between align-items-center">
              <span class="text-truncate">{{ post.title }}</span>
              <span class="badge bg-secondary">{{ post.viewCount }} visualizaÃ§Ãµes</span>
            </li>
          </ul>
        </div>
      </div>
    </div>

  </div>

 <!-- GrÃ¡fico abaixo dos cards -->
<div class="mt-5">
  <apx-chart 
    *ngIf="chartOptions && chartOptions.series"
    [series]="chartOptions.series || []"
    [chart]="chartOptions.chart || { type: 'bar', height: 350 }"
    [xaxis]="chartOptions.xaxis || { categories: [] }"
    [dataLabels]="chartOptions.dataLabels || { enabled: false }"
    [title]="chartOptions.title || { text: '' }">
  </apx-chart>
</div>

</div>
======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-posts\writer-posts.component.spec.ts ========
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { WriterPostsComponent } from './writer-posts.component';

describe('WriterPostsComponent', () => {
  let component: WriterPostsComponent;
  let fixture: ComponentFixture<WriterPostsComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [WriterPostsComponent]
    });
    fixture = TestBed.createComponent(WriterPostsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-posts\writer-posts.component.ts ========
import { Component, Input, Output, EventEmitter, OnInit, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';
import { Router } from '@angular/router';
import {
  ApexAxisChartSeries,
  ApexChart,
  ApexXAxis,
  ApexDataLabels,
  ApexTitleSubtitle
} from 'ng-apexcharts';
import { BlogPost } from 'src/app/Features/blog-post/models/blog-post.model';

export type ChartOptions = {
  series: ApexAxisChartSeries;
  chart: ApexChart;
  xaxis: ApexXAxis;
  dataLabels: ApexDataLabels;
  title: ApexTitleSubtitle;
};

@Component({
  selector: 'app-writer-posts',
  templateUrl: './writer-posts.component.html',
  encapsulation: ViewEncapsulation.None,
})
export class WriterPostsComponent implements OnInit, OnChanges {
  @Input() posts: BlogPost[] = [];
  @Output() viewAllPosts = new EventEmitter<void>();

  public chartOptions: Partial<ChartOptions> = {
    series: [{
      name: 'VisualizaÃ§Ãµes',
      data: []
    }],
    chart: { 
      type: 'bar', 
      height: 350 
    },
    xaxis: { 
      categories: [] 
    },
    dataLabels: { 
      enabled: false 
    },
    title: { 
      text: 'Top 5 Posts Mais Visualizados' 
    }
  };

  constructor(private router: Router) {}

  ngOnInit(): void {
    
    if (this.posts.length > 0) {
      this.updateChartOptions();
    }
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['posts'] && this.posts.length > 0) {
      
      this.updateChartOptions();
    }
  }

  private updateChartOptions(): void {
    const topViewed = [...this.posts]
      .sort((a, b) => b.viewCount - a.viewCount)
      .slice(0, 5);

    

    this.chartOptions = {
      series: [
        {
          name: 'VisualizaÃ§Ãµes',
          data: topViewed.map(p => p.viewCount),
        },
      ],
      chart: {
        type: 'bar',
        height: 350,
      },
      title: {
        text: 'Top 5 Posts Mais Visualizados',
      },
      xaxis: {
        categories: topViewed.map(p => p.title),
        labels: {
          style: {
            fontSize: '12px'
          }
        }
      },
      dataLabels: {
        enabled: true,
      },
    };

    
  }

  addPost(): void {
    this.router.navigateByUrl('/dashboard/add');
  }

  goToPosts(): void {
    this.viewAllPosts.emit();
  }

  get latestPosts(): BlogPost[] {
    return [...this.posts]
      .sort((a, b) => new Date(b.publishedDate).getTime() - new Date(a.publishedDate).getTime())
      .slice(0, 5);
  }

  get totalPosts(): number {
    return this.posts.length;
  }

  get isChartReady(): boolean {
    return this.posts.length > 0 && 
           this.chartOptions.series !== undefined && 
           this.chartOptions.series[0].data.length > 0;
  }
}
======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-posts-list\writer-posts-list.component.html ========
<!-- TÃ­tulo e Filtro -->
<div class="d-flex justify-content-between align-items-center mb-4">
  <h3>Seus Posts</h3>

 
</div>

<!-- Lista de Posts -->
<div *ngFor="let post of filteredPosts" class="post-card">
  <div class="post-card-body">
    <!-- Imagem -->
    <img [src]="post.featuredImageUrl || 'assets/no-image.png'" alt="Imagem do post" class="post-image" />

    <!-- ConteÃºdo -->
    <div class="post-content">
      <h4>{{ post.title }}</h4>
      <p>{{ post.shortDescription }}</p>

      <div class="post-meta">
        <a [routerLink]="['/profile', post.author.userName]">
          {{ '@' + post.author.userName }}
        </a>
        <time>{{ post.publishedDate | date: 'mediumDate' }}</time>
      </div>

      <div class="actions">
        <a [routerLink]="['/dashboard/details', post.id]">Ver</a>
        <a [routerLink]="['/dashboard/edit', post.id]">Editar</a>
        <!-- BotÃ£o de excluir (apenas para admin) -->
        <button class="btn btn-danger btn-sm" (click)="deletePost(post.id)">
          Excluir
        </button>
      </div>
    </div>
  </div>
</div>

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-posts-list\writer-posts-list.component.spec.ts ========
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { WriterPostsListComponent } from './writer-posts-list.component';

describe('WriterPostsListComponent', () => {
  let component: WriterPostsListComponent;
  let fixture: ComponentFixture<WriterPostsListComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [WriterPostsListComponent]
    });
    fixture = TestBed.createComponent(WriterPostsListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-posts-list\writer-posts-list.component.ts ========
import { Component, Input, OnInit } from '@angular/core';
import { BlogPost } from 'src/app/Features/blog-post/models/blog-post.model';
import { UserProfile } from 'src/app/profile/user-profile/shared/models/user-profile.model';

import { BlogPostService } from 'src/app/Features/blog-post/services/blog-post.service';
import { ToastrService } from 'ngx-toastr';
import Swal from 'sweetalert2';
import { UserProfileService } from 'src/app/profile/user-profile.service';

@Component({
  selector: 'app-writer-posts-list',
  templateUrl: './writer-posts-list.component.html',
  styleUrls: ['./writer-posts-list.component.css']
})
export class WriterPostsListComponent implements OnInit {
  @Input() posts: BlogPost[] = [];
  @Input() isAdmin: boolean = false;
  
  authors: UserProfile[] = [];
  filteredPosts: BlogPost[] = [];
  selectedAuthor: string = '';
  searchTerm: string = '';

  constructor(
    
    private blogPostService: BlogPostService,
    
   
  ) {}

  ngOnInit(): void {
    this.filteredPosts = this.posts;

    // Buscar lista de writers apenas se for admin
    if (this.isAdmin) {
      
    }
  }

 

  

  deletePost(postId: string) {
    Swal.fire({
      title: 'Tem certeza?',
      text: 'VocÃª nÃ£o poderÃ¡ desfazer esta aÃ§Ã£o!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Sim, excluir',
      cancelButtonText: 'Cancelar'
    }).then((result) => {
      if (result.isConfirmed) {
        this.blogPostService.deleteBlogPost(postId).subscribe({
          next: () => {
            // Filtra os posts e atualiza tanto a lista original quanto a lista filtrada
            this.posts = this.posts.filter(post => post.id !== postId);
            this.filteredPosts = this.filteredPosts.filter(post => post.id !== postId);
  
            Swal.fire({
              title: 'ExcluÃ­do!',
              text: 'O post foi removido com sucesso.',
              icon: 'success',
              confirmButtonColor: '#3085d6'
            });
          },
          error: () => {
            Swal.fire({
              title: 'Erro',
              text: 'Erro ao excluir o post. Tente novamente.',
              icon: 'error',
              confirmButtonColor: '#d33'
            });
          }
        });
      }
    });
  }
  
}
======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-profile\writer-profile.component.html ========
<div class="card update-profile-card">
  <div class="card-body">

    <!-- FormulÃ¡rio de informaÃ§Ãµes do usuÃ¡rio -->
    <form *ngIf="profileForm" [formGroup]="profileForm" (ngSubmit)="onSubmit()">

      <!-- VisualizaÃ§Ã£o -->
      <ng-container *ngIf="!isEditing; else editMode">
        <h5>{{ profile?.fullName }}</h5>
        <p class="text-muted">{{ '@' + profile?.userName }}</p>
        <p>{{ profile?.bio }}</p>
        <p class="text-secondary small">{{ profile?.email }}</p>
      </ng-container>

      <!-- EdiÃ§Ã£o -->
      <ng-template #editMode>
        <div class="mb-3">
          <label>Nome completo</label>
          <input class="form-control" formControlName="fullName" />
        </div>

        <div class="mb-3">
          <label>Nome de usuÃ¡rio</label>
          <input class="form-control" formControlName="userName" />
          <small *ngIf="userNameExists" class="text-danger">Nome jÃ¡ em uso.</small>
        </div>

        <div class="mb-3">
          <label>Bio</label>
          <textarea class="form-control" formControlName="bio" rows="3"></textarea>
        </div>

        <div class="mb-3">
          <label>Interesses</label>
          <textarea class="form-control" formControlName="interests" rows="2" placeholder="Ex: FicÃ§Ã£o cientÃ­fica, distopias..."></textarea>
        </div>
        
      </ng-template>

      <!-- BotÃµes -->
      <div class="d-flex gap-2">
        <button *ngIf="!isEditing" type="button" class="btn btn-outline-secondary" (click)="enableEdit()">Editar</button>
        <ng-container *ngIf="isEditing">
          <button type="submit" class="btn btn-primary" [disabled]="profileForm.invalid || userNameExists">Salvar</button>
          <button type="button" class="btn btn-outline-danger" (click)="cancelEdit()">Cancelar</button>
          <button class="btn btn-outline-danger mt-3" (click)="onDeleteMyProfile()">
            Excluir meu perfil
          </button>
        </ng-container>
      </div>
    </form>
  </div>
</div>

<!-- FormulÃ¡rio separado para alteraÃ§Ã£o de senha -->
<div class="card update-password-card mt-4">
  <div class="card-body">
    <h6 class="mb-3">Alterar Senha</h6>

    <form [formGroup]="passwordForm" (ngSubmit)="changePassword()">
      <div class="mb-3">
        <label>Senha atual</label>
        <input type="password" class="form-control" formControlName="currentPassword">
      </div>

      <div class="mb-3">
        <label>Nova senha</label>
        <input type="password"
               class="form-control"
               formControlName="newPassword"
               (focus)="passwordFocused = true"
               (blur)="passwordFocused = false"
               (input)="validatePassword(passwordForm.get('newPassword')?.value)">
      </div>

      <!-- ValidaÃ§Ãµes visuais -->
      <div *ngIf="passwordFocused" class="password-criteria mb-3">
        <ul class="list-unstyled small">
          <li *ngFor="let c of criteriaList">
            <span *ngIf="c.loading" class="spinner-border spinner-border-sm text-secondary me-1"></span>
            <span *ngIf="!c.loading">
              <i class="bi"
                 [ngClass]="c.valid ? 'bi-check-circle-fill text-success' : 'bi-x-circle-fill text-danger'"></i>
            </span>
            {{ c.label }}
          </li>
        </ul>
      </div>

      <button type="submit" class="btn btn-warning" [disabled]="passwordForm.invalid">Atualizar Senha</button>
    </form>
  </div>
</div>

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-profile\writer-profile.component.spec.ts ========
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { WriterProfileComponent } from './writer-profile.component';

describe('WriterProfileComponent', () => {
  let component: WriterProfileComponent;
  let fixture: ComponentFixture<WriterProfileComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [WriterProfileComponent]
    });
    fixture = TestBed.createComponent(WriterProfileComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-profile\writer-profile.component.ts ========
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { AuthService } from 'src/app/Features/auth/services/auth.service';
import { UserProfile } from 'src/app/profile/user-profile/shared/models/user-profile.model';
import { UserProfileService } from 'src/app/profile/user-profile.service';

@Component({
  selector: 'app-writer-profile',
  templateUrl: './writer-profile.component.html',
  styleUrls: ['./writer-profile.component.css']
})
export class WriterProfileComponent implements OnInit {
  profileForm!: FormGroup;
  passwordForm!: FormGroup;
  profile?: UserProfile;
  isEditing = false;
  userNameExists = false;
  passwordFocused = false;
  

  criteriaList = [
    { key: 'hasUpperCase', label: 'Pelo menos uma letra maiÃºscula', valid: false, loading: false },
    { key: 'hasNumber', label: 'Pelo menos um nÃºmero', valid: false, loading: false },
    { key: 'hasSymbol', label: 'Pelo menos um sÃ­mbolo (!@#$...)', valid: false, loading: false },
    { key: 'hasMinLength', label: 'MÃ­nimo de 6 caracteres', valid: false, loading: false }
  ];

  constructor(
    private fb: FormBuilder,
    private userProfileService: UserProfileService,
    private toastr: ToastrService,
    private authService: AuthService,
    private router: Router
  ) {}

  ngOnInit(): void {
    // Escuta o perfil armazenado no BehaviorSubject
    this.userProfileService.profile$.subscribe({
      next: (profile) => {
        if (profile) {
          this.initProfileForm(profile);
        } else {
          // Se ainda nÃ£o houver perfil no BehaviorSubject, busca da API
          this.userProfileService.GetMyProfile().subscribe({
            next: (fetchedProfile) => {
              this.userProfileService.setProfile(fetchedProfile);
              this.initProfileForm(fetchedProfile);
            },
            error: () => this.toastr.error('Erro ao carregar o perfil.')
          });
        }
      },
      error: () => this.toastr.error('Erro ao acessar perfil armazenado.')
    });
  
    // Inicializa o formulÃ¡rio de senha
    this.passwordForm = this.fb.group({
      currentPassword: ['', Validators.required],
      newPassword: [
        '',
        [
          Validators.required,
          Validators.minLength(6),
          Validators.pattern(/^(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*])/)
        ]
      ]
    });
  
    this.passwordForm.get('newPassword')?.valueChanges.subscribe(password => {
      this.validatePassword(password);
    });
  }
  
  

  private initProfileForm(profile: UserProfile): void {
    this.profile = profile;

    this.profileForm = this.fb.group({
      fullName: [profile.fullName, [Validators.required, Validators.minLength(3)]],
      userName: [profile.userName, [Validators.required, Validators.minLength(3)]],
      bio: [profile.bio],
      interests: [profile.interests] 
      
    });

    this.f['userName'].valueChanges.subscribe(() => {
      this.userNameExists = false;
    });
  }

  enableEdit(): void {
    this.isEditing = true;
  }

  cancelEdit(): void {
    if (!this.profile) return;

    this.isEditing = false;
    this.userNameExists = false;

    this.profileForm.patchValue({
      fullName: this.profile.fullName,
      userName: this.profile.userName,
      bio: this.profile.bio,
      interests: this.profile.interests 
    });
  }

  changePassword(): void {
    const { currentPassword, newPassword } = this.passwordForm.value;

    if (this.passwordForm.invalid) {
      this.passwordForm.markAllAsTouched();
      return;
    }

    this.userProfileService.updatePassword(currentPassword, newPassword).subscribe({
      next: () => {
        this.toastr.success('Senha atualizada com sucesso!');
        this.passwordForm.reset();
        this.criteriaList.forEach(c => (c.valid = false));
      },
      error: () => {
        this.toastr.error('Erro ao atualizar a senha. Verifique a senha atual.');
      }
    });
  }

  onSubmit(): void {
    if (this.profileForm.invalid) {
      this.profileForm.markAllAsTouched();
      return;
    }

    this.sendProfileUpdateRequest();
  }

  private sendProfileUpdateRequest(): void {
    const formValues = this.profileForm.value;
    const formData = new FormData();

    formData.append('fullName', formValues.fullName);
    formData.append('bio', formValues.bio || '');
    formData.append('userName', formValues.userName);
    formData.append('interests', formValues.interests || '');

    this.userProfileService.UpdateMyProfile(formData).subscribe({
      next: (updatedProfile) => {
        this.toastr.success('Perfil atualizado com sucesso!');
        this.isEditing = false;
        this.userNameExists = false;
    
        this.profile = updatedProfile; // â† atualiza o card
        this.profileForm.patchValue({
          fullName: updatedProfile.fullName,
          userName: updatedProfile.userName,
          bio: updatedProfile.bio
        });
    
        this.userProfileService.setProfile(updatedProfile); // â† se usa serviÃ§o compartilhado
      },
    
      error: (error) => {
        if (error.status === 400 && error.error === 'Nome de usuÃ¡rio jÃ¡ estÃ¡ em uso.') {
          this.userNameExists = true;
        } else {
          this.toastr.error('Erro ao atualizar perfil.');
        }
      }
    });
  }

  private loadLatestProfile(): void {
    this.userProfileService.GetMyProfile().subscribe({
      next: (profile) => {
        this.profile = profile;
        this.profileForm.patchValue({
          fullName: profile.fullName,
          userName: profile.userName,
          bio: profile.bio,
          interests: profile.interests
        });
      }
    });
  }

  validatePassword(password: string): void {
    const validations = {
      hasUpperCase: /[A-Z]/.test(password),
      hasNumber: /\d/.test(password),
      hasSymbol: /[!@#$%^&*(),.?":{}|<>]/.test(password),
      hasMinLength: password.length >= 6
    };

    this.criteriaList.forEach((item) => {
      const wasValid = item.valid;
      const isNowValid = validations[item.key as keyof typeof validations];

      if (isNowValid && !wasValid) {
        item.loading = true;
        setTimeout(() => {
          item.loading = false;
          item.valid = true;
        }, 400);
      } else if (!isNowValid) {
        item.valid = false;
        item.loading = false;
      }
    });
  }

  onDeleteMyProfile(): void {
    const confirmed = confirm('Tem certeza que deseja excluir seu perfil? Esta aÃ§Ã£o nÃ£o poderÃ¡ ser desfeita.');
  
    if (confirmed) {
      this.userProfileService.deleteUser().subscribe({
        next: () => {
          this.toastr.success('Perfil excluÃ­do com sucesso.');
          this.authService.lougout(); // Importante: fazer logout apÃ³s deletar o perfil
          setTimeout(() => {
            this.router.navigateByUrl('/login');
          }, 1500);
        },
        error: (error) => {
          console.error(error);
          if (error.status === 403) {
            this.toastr.error('VocÃª nÃ£o tem permissÃ£o para excluir este perfil.');
          } else {
            this.toastr.error('Erro ao excluir o perfil.');
          }
        }
      });
    }
}


  get f() {
    return this.profileForm.controls;
  }

  get pf() {
    return this.passwordForm.controls;
  }
}

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-sidebar\writer-sidebar.component.html ========
<!-- writer-sidebar.component.html -->
<div class="d-flex flex-column p-3 bg-light border-end h-100">
    <h5 class="mb-4">Painel</h5>
  
    <button class="btn btn-outline-primary mb-2" (click)="selectSection('posts')">
      ðŸ“ Posts
    </button>
  
    <button class="btn btn-outline-primary mb-2" (click)="selectSection('categories')">
      ðŸ—‚ï¸ Categorias
    </button>
  
    <button class="btn btn-outline-primary" (click)="selectSection('profile')">
      ðŸ™â€â™‚ï¸ Atualizar Perfil
    </button>
  </div>
  
======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-sidebar\writer-sidebar.component.spec.ts ========
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { WriterSidebarComponent } from './writer-sidebar.component';

describe('WriterSidebarComponent', () => {
  let component: WriterSidebarComponent;
  let fixture: ComponentFixture<WriterSidebarComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [WriterSidebarComponent]
    });
    fixture = TestBed.createComponent(WriterSidebarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-sidebar\writer-sidebar.component.ts ========
// writer-sidebar.component.ts
import { Component, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-writer-sidebar',
  templateUrl: './writer-sidebar.component.html',
})
export class WriterSidebarComponent {
  @Output() sectionChanged = new EventEmitter<string>();

  selectSection(section: string) {
    this.sectionChanged.emit(section);
  }
}

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-dashboard.component.html ========
<div class="dashboard-container">
  <!-- Perfil Ã  esquerda -->
  <div class="profile-card">
    <div class="profile-image position-relative">
      <!-- BotÃ£o para trocar foto -->
      <button type="button" class="edit-photo-btn" (click)="photoInput.click()" title="Alterar foto">
        <i class="bi bi-camera-fill"></i>
      </button>

      <!-- Input escondido -->
      <input #photoInput type="file" accept="image/*" (change)="onFileSelected($event)" style="display: none;" />

      <img [src]="displayImageUrl || 'assets/default-avatar.png'" alt="Foto de Perfil" />
    </div>
    <div class="profile-info">
      <h2>{{ profile?.fullName }}</h2>
      <p class="username">{{ '@' + profile?.userName }}</p>
      <p class="email">{{ profile?.email }}</p>

      <div class="bio" *ngIf="profile?.bio">
        <label>Bio</label>
        <p>{{ profile?.bio }}</p>
      </div>
      <div class="interests" *ngIf="profile?.interests">
        <label>Interesses</label>
        <p>{{ profile?.interests }}</p>
      </div>
      

      <!-- Sidebar estilo Admin -->
      <div class="sidebar-buttons">
        <button class="btn btn-outline-primary w-100 mb-2" (click)="onSectionChange('posts')">Dashboard</button>
        <button class="btn btn-outline-primary w-100 mb-2" (click)="onSectionChange('posts-list')">Meus Posts</button>
        <button class="btn btn-outline-primary w-100 mb-2" (click)="onSectionChange('profile')">Perfil</button>
      </div>
    </div>
  </div>

  <!-- Ãrea dinÃ¢mica Ã  direita -->
  <div class="post-list">
    <ng-container [ngSwitch]="selectedSection">
      <app-writer-posts-list *ngSwitchCase="'posts-list'" [posts]="blogPosts">
      </app-writer-posts-list>

      <app-writer-posts *ngSwitchCase="'posts'" [posts]="blogPosts" (viewAllPosts)="onSectionChange('posts-list')">
      </app-writer-posts>

      <app-writer-profile *ngSwitchCase="'profile'"></app-writer-profile>

      <app-writer-posts *ngSwitchDefault [posts]="blogPosts" (viewAllPosts)="onSectionChange('posts-list')">
      </app-writer-posts>
    </ng-container>
  </div>
</div>

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-dashboard.component.spec.ts ========
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { WriterDashboardComponent } from './writer-dashboard.component';


describe('writer-DashboardComponent', () => {
  let component: WriterDashboardComponent;
  let fixture: ComponentFixture<WriterDashboardComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [WriterDashboardComponent]
    });
    fixture = TestBed.createComponent(WriterDashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\components\writer-dashboard.component.ts ========
import { Component, OnInit } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { UserProfile } from 'src/app/profile/user-profile/shared/models/user-profile.model';
import { UserProfileService } from 'src/app/profile/user-profile.service';
import { Router } from '@angular/router';
import { BlogPost } from 'src/app/Features/blog-post/models/blog-post.model';
import { BlogPostService } from 'src/app/Features/blog-post/services/blog-post.service';

@Component({
  selector: 'app-writer-dashboard',
  templateUrl: './writer-dashboard.component.html',
  styleUrls: ['./writer-dashboard.component.css']
})
export class WriterDashboardComponent implements OnInit {
  profile?: UserProfile;
  blogPosts: BlogPost[] = [];
  loading = true;
  displayImageUrl: string = '';
  selectedSection: string = 'posts';
  selectedImageFile: File | null = null;

  isAdmin: boolean = false;
  constructor(
    private userProfileService: UserProfileService,
    private blogPostService: BlogPostService,
    private toastr: ToastrService,
    
  ) {}

  ngOnInit(): void {
    this.loadProfileAndPosts();
  }

  private loadProfileAndPosts(): void {
    this.userProfileService.GetMyProfile().subscribe({
      next: (profile) => {
        this.profile = profile;
        this.displayImageUrl =this.userProfileService.getFullImageUrl(profile.imageUrl);

        this.blogPostService.getMyPosts().subscribe({
          next: (posts) => {
            this.blogPosts = posts;
            
            this.loading = false;
          },
          error: () => {
            this.toastr.error('Erro ao carregar posts');
            this.loading = false;
          }
        });
      },
      error: () => {
        this.toastr.error('Erro ao carregar perfil');
        this.loading = false;
      }
    });
  }

  onSectionChange(section: string) {
    this.selectedSection = section;
  }
  onFileSelected(event: any): void {
    const file = event.target.files[0];
    if (!file) return;
  
    if (!file.type.match(/image\/*/)) {
      this.toastr.error('Por favor, selecione um arquivo de imagem vÃ¡lido.');
      return;
    }
  
    if (file.size > 5 * 1024 * 1024) {
      this.toastr.error('A imagem deve ter no mÃ¡ximo 5MB.');
      return;
    }
  
    this.selectedImageFile = file;
    this.uploadProfileImage();
  }
  
  uploadProfileImage(): void {
    if (!this.selectedImageFile) return;
  
    const formData = new FormData();
    formData.append('fullName', this.profile?.fullName || '');
    formData.append('userName', this.profile?.userName || '');
    formData.append('bio', this.profile?.bio || '');
    formData.append('imageFile', this.selectedImageFile);
  
    this.userProfileService.UpdateMyProfile(formData).subscribe({
      next: (updatedProfile) => {
        this.toastr.success('Imagem de perfil atualizada!');
        this.profile = updatedProfile;
        this.displayImageUrl = this.userProfileService.getFullImageUrl(updatedProfile.imageUrl);
        this.selectedImageFile = null;
        this.userProfileService.setProfile(updatedProfile);
      },
      error: () => {
        this.toastr.error('Erro ao atualizar imagem do perfil.');
      }
    });
  }
  
 


}





======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\services\writer.service.spec.ts ========
import { TestBed } from '@angular/core/testing';

import { WriterService } from './writer.service';

describe('WriterService', () => {
  let service: WriterService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(WriterService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\services\writer.service.ts ========
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class WriterService {

  constructor() { }
}

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\writer-routing.module.ts ========
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { EditBlogPostComponent } from '../../blog-post/edit-blog-post/edit-blog-post.component';
import { BlogPostDetailsComponent } from '../../blog-post/details-blogpost/details-blogpost.component';
import { WriterDashboardComponent } from './components/writer-dashboard.component';
import { RouterModule, Routes } from '@angular/router';
import { WriterProfileComponent } from './components/writer-profile/writer-profile.component';
import { AddBlogpostComponent } from '../../blog-post/add-blogpost/add-blogpost.component';
import { authGuard } from '../../auth/guards/auth.guard';

const routes: Routes = [
  {
    path: 'dashboard',
    children: [
  { path: '', component: WriterDashboardComponent },
  { path: 'edit/:id', component: EditBlogPostComponent },
  { path: 'details/:id', component: BlogPostDetailsComponent },
  {path: 'add', component: AddBlogpostComponent},
  {path: 'updateprofile', component: WriterProfileComponent}
],
canActivate: [authGuard]
}
];
@NgModule({
  declarations: [],
  imports: [
    RouterModule.forChild(routes)
  ],
  exports:[RouterModule]
})
export class WriterRoutingModule { }

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\writer\writer.module.ts ========
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { WriterPostsComponent } from './components/writer-posts/writer-posts.component';
import { WriterSidebarComponent } from './components/writer-sidebar/writer-sidebar.component';
import { WriterPostsListComponent } from './components/writer-posts-list/writer-posts-list.component';
import { WriterProfileComponent } from './components/writer-profile/writer-profile.component';
import { ReactiveFormsModule } from '@angular/forms';
import { WriterRoutingModule } from './writer-routing.module';
import { SharedModule } from '../shared/shared.module';
import { NgApexchartsModule } from 'ng-apexcharts';
import { WriterDashboardComponent } from './components/writer-dashboard.component';



@NgModule({
  declarations: [
    WriterDashboardComponent,
    WriterPostsComponent,
    WriterSidebarComponent,
    WriterPostsListComponent,
    WriterProfileComponent

  ],
  imports: [
    CommonModule,
    ReactiveFormsModule,
   WriterRoutingModule,
   SharedModule,
   NgApexchartsModule
  ],
  exports:[
    WriterDashboardComponent,
    WriterProfileComponent
  ]
})
export class WriterModule { }

======== FILE: C:\Users\Pichau\Desktop\sameer\src\app\Features\dashboard\dashboard.module.ts ========
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { WriterModule } from './writer/writer.module';
import { UserProfileCardComponent } from './shared/components/user-profile-card/user-profile-card.component';
import { UserProfileListComponent } from './shared/components/user-profile-list/user-profile-list.component';
import { SharedModule } from './shared/shared.module';
import { AdminModule } from './admin/admin.module';




@NgModule({
  declarations: [
   
  ],
  imports: [
    CommonModule,
    SharedModule,
    AdminModule,
    WriterModule
   
    
  ],
  exports:[
   SharedModule,
    AdminModule,    
    WriterModule    
  ]
})
export class DashboardModule { }

